{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Metricheq","text":"<p>A tool that simplifies gathering SRE metrics from various services.</p>"},{"location":"#incident-frequency-example","title":"Incident frequency Example","text":"<pre><code>def is_above_threshold(metric: Metric):\n    threshold = 10  \n    return metric.value &gt;= threshold\n\nconfig = PagerDutyConfig(api_key=\"somekey\")\npagerduty_connector = PagerDutyConnector.from_config(config)\n\nparams = {\n    \"service_id\": \"P8WTODX\",\n    \"incident_urgency\": \"high\",\n    \"since\": datetime.utcnow() - timedelta(days=7),\n    \"until\": datetime.utcnow(),\n}\n\ndeducer = PagerDutyIncidentFrequencyDeducer(pagerduty_connector, params)\nresult = deducer.metric.satisfies(is_above_threshold)\n</code></pre>"},{"location":"how-it-works/","title":"How it works","text":"<p>Metricheq consists of connectors for establishing connections and deducers for data handling and metric extraction. The deduced metrics are either boolean values or numerical.</p>"},{"location":"how-it-works/#components","title":"Components","text":""},{"location":"how-it-works/#authenticators","title":"Authenticators","text":"<ul> <li>Abstract base class: <code>Authenticator</code></li> <li>Derived Classes:<ul> <li><code>BearerTokenAuthenticator</code>: Implements bearer token authentication.</li> <li><code>TokenAuthenticator</code>: Uses token-based authentication.</li> <li><code>UserPasswordBasicAuthenticator</code>: Provides basic authentication via username and password.</li> </ul> </li> </ul>"},{"location":"how-it-works/#client","title":"Client","text":"<ul> <li>Abstract Base Class: <code>Client</code>.</li> <li>Key Features:<ul> <li>Maintains configuration settings.</li> <li>Includes an abstract method <code>make_request</code> for making requests to endpoints.</li> </ul> </li> </ul>"},{"location":"how-it-works/#connector","title":"Connector","text":"<ul> <li>Abstract Base Class: <code>Connector</code>.</li> <li>Key Features:<ul> <li>Manages a <code>Client</code> instance.</li> <li>Has an abstract method <code>ensure_connectivity</code> for ensuring the connection.</li> </ul> </li> </ul>"},{"location":"how-it-works/#deducer","title":"Deducer","text":"<ul> <li>Abstract Base Class: <code>Deducer</code>.</li> <li>Key Features:<ul> <li>Utilizes <code>Connector</code> for data retrieval.</li> <li>Includes abstract methods <code>retrieve_data</code>, <code>process_data</code>, and <code>finalize</code>.</li> <li>The <code>deduce</code> method orchestrates the retrieval, processing, and finalizing of data into a metric.</li> </ul> </li> </ul>"},{"location":"how-it-works/#metric","title":"Metric","text":"<ul> <li>Class: <code>Metric</code>.</li> <li>Key Features:<ul> <li>Stores values that are integers, floats, or booleans.</li> <li>Includes methods <code>satisfies</code> and <code>satisfies_all</code> for criteria evaluation.</li> </ul> </li> </ul>"},{"location":"how-it-works/#process-flow","title":"Process Flow","text":"<ol> <li>Authentication: Selection and instantiation of an <code>Authenticator</code> based on the required authentication method.</li> <li>Connection Establishment: Creation and utilization of a <code>Connector</code> with a <code>Client</code> to ensure connectivity.</li> <li>Data Extraction and Processing: Initialization of a <code>Deducer</code> to manage data retrieval, processing, and finalizing.</li> <li>Metric Evaluation: Use of the <code>Metric</code> class for storing and evaluating the final values against set criteria.</li> </ol>"},{"location":"connectors/github/","title":"GitHub","text":""},{"location":"connectors/github/#configuration","title":"Configuration","text":"<pre><code>from metricheq.core.connectors.github import GitHubConfig\nfrom metricheq.core.connectors.github import GitHubConnector\n\nconfig = GitHubConfig(api_key=\"your_api_key_here\")\n</code></pre>"},{"location":"connectors/github/#creating-a-connector-instance","title":"Creating a Connector Instance","text":"<p>With the configuration ready, you can create a GitHubConnector instance:</p> <pre><code>connector = GitHubConnector.from_config(config)\n</code></pre>"},{"location":"connectors/github/#available-deducers","title":"Available Deducers","text":"<ul> <li>GitHubFileExistenceDeducer</li> <li>GitHubLastWorkFlowDurationDeducer</li> <li>GitHubLastCommitAgeDeducer</li> </ul>"},{"location":"connectors/pagerduty/","title":"Pagerduty","text":"<p>WIP</p>"},{"location":"connectors/pagerduty/#available-deducers","title":"Available Deducers","text":"<ul> <li>PagerDutyAVGIncidentResolutionTimeDeducer</li> <li>PagerDutyIncidentFrequencyDeducer</li> </ul>"},{"location":"connectors/prometheus/","title":"Prometheus","text":"<p>WIP</p>"},{"location":"connectors/prometheus/#available-deducers","title":"Available Deducers","text":"<ul> <li>PrometheusServiceAvailabilityDeducer</li> </ul>"},{"location":"connectors/sonar/","title":"Sonar","text":"<p>WIP</p>"},{"location":"connectors/sonar/#available-deducers","title":"Available Deducers","text":"<ul> <li>SonarMeasureDeducer</li> </ul>"},{"location":"deducers/github/github_file_existence_deducer/","title":"Github file existence deducer","text":"<p>WIP</p>"},{"location":"deducers/github/github_last_commit_age_deducer/","title":"Github last commit age deducer","text":"<p>WIP</p>"},{"location":"deducers/github/github_last_workflow_duration_deducer/","title":"Github last workflow duration deducer","text":"<p>WIP</p>"},{"location":"deducers/pagerduty/pagerduty_avg_incident_resolution_time_deducer/","title":"Pagerduty avg incident resolution time deducer","text":"<p>WIP</p>"},{"location":"deducers/pagerduty/pagerduty_incident_frequency_deducer/","title":"Pagerduty incident frequency deducer","text":"<p>WIP</p>"},{"location":"deducers/prometheus/prometheus_service_availability_deducer/","title":"Prometheus service availability deducer","text":"<p>WIP</p>"}]}